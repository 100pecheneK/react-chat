{"version":3,"sources":["hooks/useLocalStorage.jsx","components/Login.jsx","contexts/ContactsProvider.jsx","config.js","contexts/SocketProvider.jsx","contexts/ConversationsProvider.jsx","components/NewContactModal.jsx","components/NewConversationModal.jsx","components/Modals.jsx","contexts/ModalProvider.jsx","components/OpenConversation.jsx","components/Conversations.jsx","components/Contacts.jsx","components/Sidebar.jsx","hooks/useCopyToClipboard.jsx","components/Dashboard.jsx","components/App.jsx","index.js"],"names":["useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Label","Form","Control","Group","Login","onIdSubmit","Container","className","style","height","onSubmit","e","preventDefault","type","onChange","target","required","Button","variant","onClick","uuidV4","ContactsContext","React","createContext","useContacts","useContext","ContactsProvider","children","useLocalstorage","contacts","setContacts","Provider","createContact","id","name","prevContacts","updateContact","map","contact","config","SERVER_URL","SocketContext","SocketProvider","socket","setSocket","newSocket","io","transports","query","close","ConversationsContext","useConversations","ConversationsProvider","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","formattedConversations","conversation","index","recipients","recipient","find","messages","message","sender","fromMe","senderName","selected","addMessageToConversation","useCallback","text","prevConversations","newConversations","madeChange","newMessage","i","currentConversation","arrayEcuality","slice","undefined","si","findIndex","c","on","off","createConversation","selectedConversation","selectConversationIndex","prevIndex","sendMessage","emit","a","b","length","sort","every","NewContactModal","closeModal","options","form","setForm","handleChange","prevForm","Modal","Header","closeButton","Body","update","trim","disabled","NewConversationModal","selectedContactIds","setSelectedContactIds","controlId","Check","includes","label","contactId","prevSelectedContactIds","filter","prevId","Modals","modalName","useModal","modalOpen","modals","show","onHide","ModalContext","ModalProvider","setModalOpen","setModalName","setInitialValue","setOptions","openModal","render","OpenConversation","setText","setRef","node","scrollIntoView","behavior","handleSubmit","r","checkIsInMyContact","OverlayTrigger","placement","overlay","Tooltip","ref","InputGroup","as","resize","onKeyPress","Append","Conversations","ListGroup","Item","action","active","join","Contacts","TabContainer","Tab","TabContent","Content","TabPane","Pane","NavItem","Nav","NavLink","Link","CONVERSATIONS_KEY","CONTACTS_KEY","Sidebar","activeKey","setActiveKey","modal","conversationOpen","resetInterval","isCopied","setCopied","handleCopy","copy","toString","console","error","timeout","setTimeout","clearTimeout","useCopyToClipboard","width","onSelect","eventKey","cursor","clear","Dashboard","App","setId","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.67f884a8.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst PREFIX = 'react-chat-'\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey)\n    if (jsonValue !== null) return JSON.parse(jsonValue)\n    if (typeof initialValue === 'function') {\n      return initialValue()\n    } else {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\n  }, [prefixedKey, value])\n\n  return [value, setValue]\n}\n","import React, { useState } from 'react'\nimport { Container, Form, Button } from 'react-bootstrap'\nimport { v4 as uuidV4 } from 'uuid'\nconst { Label, Control, Group } = Form\n\nexport default function Login({ onIdSubmit }) {\n  const [value, setValue] = useState('')\n\n  const handleChange = e => {\n    setValue(e.target.value)\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    if (value) {\n      onIdSubmit(value)\n    }\n  }\n\n  const createNewId = () => {\n    onIdSubmit(uuidV4())\n  }\n\n  return (\n    <Container\n      className='d-flex align-items-center'\n      style={{ height: '100vh' }}\n    >\n      <Form onSubmit={handleSubmit} className='w-100'>\n        <Group>\n          <Label>Enter Your Id</Label>\n          <Control type='text' onChange={handleChange} value={value} required />\n        </Group>\n        <Button type='submit' className='mr-2'>\n          Login\n        </Button>\n        <Button variant='secondary' onClick={createNewId}>\n          Create A New Id\n        </Button>\n      </Form>\n    </Container>\n  )\n}\n","import React, { useContext } from 'react'\nimport useLocalstorage from '../hooks/useLocalStorage'\n\nconst ContactsContext = React.createContext()\n\nexport function useContacts() {\n  return useContext(ContactsContext)\n}\n\nexport default function ContactsProvider({ children }) {\n  const [contacts, setContacts] = useLocalstorage('contacts', [])\n  const createContact = (id, name) => {\n    setContacts(prevContacts => [...prevContacts, { id, name }])\n  }\n  const updateContact = (id, name) => {\n    setContacts(prevContacts =>\n      prevContacts.map(contact => {\n        if (contact.id === id) {\n          contact.name = name\n        }\n        return contact\n      })\n    )\n  }\n  return (\n    <ContactsContext.Provider\n      value={{ contacts, createContact, updateContact }}\n    >\n      {children}\n    </ContactsContext.Provider>\n  )\n}\n","const config = {\n  SERVER_URL: 'https://react-chat-misha.herokuapp.com/',\n}\nexport default config\n","import React, { useContext, useEffect, useState } from 'react'\nimport io from 'socket.io-client'\nimport config from '../config'\nconst SocketContext = React.createContext()\n\nexport function useSocket() {\n  return useContext(SocketContext)\n}\nexport default function SocketProvider({ id, children }) {\n  const [socket, setSocket] = useState()\n  useEffect(() => {\n    const newSocket = io(config.SERVER_URL, {\n      transports: ['websocket'],\n      query: { id },\n    })\n\n    setSocket(newSocket)\n    return () => newSocket.close()\n  }, [id])\n\n  return (\n    <SocketContext.Provider value={socket}>{children}</SocketContext.Provider>\n  )\n}\n","import React, { useContext, useEffect, useState, useCallback } from 'react'\nimport useLocalstorage from '../hooks/useLocalStorage'\nimport { useContacts } from './ContactsProvider'\nimport { useSocket } from './SocketProvider'\n\nconst ConversationsContext = React.createContext()\n\nexport function useConversations() {\n  return useContext(ConversationsContext)\n}\n// TODO: Если нахожусь в первоч чате, то не перекидывает в нужный\nexport default function ConversationsProvider({ id, children }) {\n  const [conversations, setConversations] = useLocalstorage('conversations', [])\n  const { contacts } = useContacts()\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState()\n  const socket = useSocket()\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => contact.id === recipient)\n      const name = (contact && contact.name) || recipient\n      return { id: recipient, name }\n    })\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => contact.id === message.sender)\n      const name = (contact && contact.name) || message.sender\n      const fromMe = id === message.sender\n      return { ...message, senderName: name, fromMe }\n    })\n    const selected = index === selectedConversationIndex\n    return { ...conversation, messages, recipients, selected }\n  })\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => [\n      ...prevConversations,\n      { recipients, messages: [] },\n    ])\n  }\n\n  const addMessageToConversation = useCallback(\n    ({ recipients, text, sender }) => {\n      setConversations(prevConversations => {\n        let madeChange = false\n        const newMessage = { sender, text }\n\n        let i = -1\n        let currentConversation = prevConversations.find(\n          (conversation, index) => {\n            i = index\n            return arrayEcuality(conversation.recipients, recipients)\n          }\n        )\n        if (currentConversation && i >= 0) {\n          madeChange = true\n          currentConversation = {\n            ...currentConversation,\n            messages: [...currentConversation.messages, newMessage],\n          }\n        }\n\n        let newConversations\n        if (madeChange) {\n          newConversations = [\n            currentConversation,\n            ...prevConversations.slice(0, i),\n            ...prevConversations.slice(i + 1),\n          ]\n        } else {\n          newConversations = [\n            { recipients, messages: [newMessage] },\n            ...prevConversations,\n          ]\n        }\n\n        if (selectedConversationIndex !== undefined) {\n          const si = newConversations.findIndex(c =>\n            arrayEcuality(\n              c.recipients,\n              prevConversations[selectedConversationIndex].recipients\n            )\n          )\n          setSelectedConversationIndex(si)\n        }\n        return newConversations\n      })\n    },\n    [setConversations, selectedConversationIndex]\n  )\n\n  useEffect(() => {\n    if (!socket) return\n    socket.on('receive-message', addMessageToConversation)\n    return () => socket.off('receive-message')\n  }, [socket, addMessageToConversation])\n\n  function sendMessage(recipients, text) {\n    socket.emit('send-message', { recipients, text })\n    addMessageToConversation({ recipients, text, sender: id })\n  }\n\n  function selectConversationIndex(index) {\n    setSelectedConversationIndex(prevIndex => {\n      if (prevIndex === index) {\n        return null\n      } else {\n        return index\n      }\n    })\n  }\n\n  const value = {\n    conversations: formattedConversations,\n    createConversation,\n    selectedConversationIndex: selectedConversationIndex,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    selectConversationIndex,\n    sendMessage,\n  }\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  )\n}\n\nfunction arrayEcuality(a, b) {\n  if (a.length !== b.length) {\n    return false\n  }\n  a.sort()\n  b.sort()\n  return a.every((e, i) => {\n    return e === b[i]\n  })\n}\n","import React, { useState } from 'react'\nimport { Form, Modal, Button } from 'react-bootstrap'\nimport { useContacts } from '../contexts/ContactsProvider'\n\nexport default function NewContactModal({ closeModal, initialValue, options }) {\n  const { createContact, updateContact } = useContacts()\n\n  const [form, setForm] = useState({\n    id: initialValue?.id ? initialValue.id : '',\n    name: initialValue?.name ? initialValue.name : '',\n  })\n\n  const { id, name } = form\n  const handleChange = e => {\n    setForm(prevForm => ({ ...prevForm, [e.target.name]: e.target.value }))\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n\n    if (options?.update) {\n      updateContact(id.trim(), name)\n    } else {\n      createContact(id.trim(), name)\n    }\n    closeModal()\n  }\n\n  return (\n    <div>\n      <Modal.Header closeButton>Create Contact</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          <Form.Group>\n            <Form.Label>Id</Form.Label>\n            <Form.Control\n              type='text'\n              name='id'\n              value={id}\n              disabled={!!options?.update}\n              onChange={handleChange}\n              required\n            />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control\n              type='text'\n              name='name'\n              value={name}\n              onChange={handleChange}\n              required\n            />\n          </Form.Group>\n          <Button type='submit'>Create</Button>\n        </Form>\n      </Modal.Body>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Form, Modal, Button } from 'react-bootstrap'\nimport { useContacts } from '../contexts/ContactsProvider'\nimport { useConversations } from '../contexts/ConversationsProvider'\n\nexport default function NewConversationModal({ closeModal }) {\n  const [selectedContactIds, setSelectedContactIds] = useState([])\n  const { contacts } = useContacts()\n  const { createConversation } = useConversations()\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    createConversation(selectedContactIds)\n    closeModal()\n  }\n  const handleCheckboxChange = contactId => {\n    setSelectedContactIds(prevSelectedContactIds => {\n      if (prevSelectedContactIds.includes(contactId)) {\n        return prevSelectedContactIds.filter(prevId => contactId === prevId)\n      } else {\n        return [...prevSelectedContactIds, contactId]\n      }\n    })\n  }\n  return (\n    <div>\n      <Modal.Header closeButton>Create Conversation</Modal.Header>\n      <Modal.Body>\n        <Form onSubmit={handleSubmit}>\n          {contacts.map(contact => (\n            <Form.Group controlId={contact.id} key={contact.id}>\n              <Form.Check\n                type='checkbox'\n                value={selectedContactIds.includes(contact.id)}\n                label={contact.name}\n                onChange={() => handleCheckboxChange(contact.id)}\n              />\n            </Form.Group>\n          ))}\n          <Button type='submit'>Create</Button>\n        </Form>\n      </Modal.Body>\n    </div>\n  )\n}\n","import React from 'react'\nimport NewContactModal from './NewContactModal'\nimport NewConversationModal from './NewConversationModal'\nimport { Modal } from 'react-bootstrap'\nimport { useModal } from '../contexts/ModalProvider'\n\nexport default function Modals({ modalName, initialValue, options }) {\n  const { modalOpen, closeModal } = useModal()\n\n  const modals = {\n    conversation: <NewConversationModal closeModal={closeModal} />,\n    contact: (\n      <NewContactModal\n        initialValue={initialValue}\n        closeModal={closeModal}\n        options={options}\n      />\n    ),\n  }\n\n  return (\n    <Modal show={modalOpen} onHide={closeModal}>\n      {modals[modalName]}\n    </Modal>\n  )\n}\n","import React, { useContext, useState } from 'react'\nimport Modals from '../components/Modals'\n\nconst ModalContext = React.createContext()\n\nexport function useModal() {\n  return useContext(ModalContext)\n}\n\nexport default function ModalProvider({ children }) {\n  const [modalOpen, setModalOpen] = useState(false)\n  const [modalName, setModalName] = useState()\n  const [initialValue, setInitialValue] = useState()\n  const [options, setOptions] = useState()\n\n  const closeModal = () => {\n    setModalOpen(false)\n  }\n\n  const openModal = (name, initialValue, options) => {\n    setInitialValue(initialValue)\n    setOptions(options)\n    setModalName(name)\n    setModalOpen(true)\n  }\n\n  const value = {\n    openModal,\n    closeModal,\n    modalOpen,\n    render: (\n      <Modals\n        modalName={modalName}\n        initialValue={initialValue}\n        options={options}\n      />\n    ),\n  }\n  return <ModalContext.Provider value={value}>{children}</ModalContext.Provider>\n}\n","import React, { useState, useCallback } from 'react'\nimport {\n  Form,\n  Button,\n  InputGroup,\n  OverlayTrigger,\n  Tooltip,\n} from 'react-bootstrap'\nimport { useContacts } from '../contexts/ContactsProvider'\nimport { useConversations } from '../contexts/ConversationsProvider'\nimport { useModal } from '../contexts/ModalProvider'\n\nexport default function OpenConversation() {\n  const [text, setText] = useState('')\n  const { sendMessage, selectedConversation } = useConversations()\n  const { contacts } = useContacts()\n\n  const { openModal } = useModal()\n\n  const setRef = useCallback(node => {\n    if (node) {\n      node.scrollIntoView({ behavior: 'smooth' })\n    }\n  }, [])\n\n  const handleSubmit = e => {\n    if (e) {\n      e.preventDefault()\n    }\n    if (!text) return\n    sendMessage(\n      selectedConversation.recipients.map(r => r.id),\n      text\n    )\n    setText('')\n  }\n\n  const onKeyPress = e => {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n      handleSubmit()\n    }\n  }\n  return (\n    <div className='d-flex flex-column flex-grow-1'>\n      <div\n        className='border-bottom d-flex justify-content-end align-items-center px-2 py-1'\n        style={{ height: '42px' }}\n      >\n        {selectedConversation.recipients.map((r, i) => {\n          if (checkIsInMyContact(r, contacts)) {\n            return (\n              <OverlayTrigger\n                key={r.id}\n                placement={'bottom'}\n                overlay={<Tooltip>{'Edit contact'}</Tooltip>}\n              >\n                <Button\n                  variant='light'\n                  className={`${i && 'ml-2'}`}\n                  onClick={() =>\n                    openModal(\n                      'contact',\n                      {\n                        id: selectedConversation.recipients[i].id,\n                        name: selectedConversation.recipients[i].name,\n                      },\n                      { update: true }\n                    )\n                  }\n                >\n                  {r.name}\n                </Button>\n              </OverlayTrigger>\n            )\n          } else {\n            return (\n              <OverlayTrigger\n                key={r.id}\n                placement={'bottom'}\n                overlay={<Tooltip>{'Add to contacts'}</Tooltip>}\n              >\n                <Button\n                  onClick={() =>\n                    openModal('contact', {\n                      id: selectedConversation.recipients[i].id,\n                    })\n                  }\n                >\n                  {!i ? r.name : `Unknown ${i + 1}`}\n                </Button>\n              </OverlayTrigger>\n            )\n          }\n        })}\n      </div>\n      <div className='flex-grow-1 overflow-auto'>\n        <div className='d-flex flex-column align-items-start justify-content-end px-3 pt-2'>\n          {selectedConversation.messages.map((message, index) => (\n            <div\n              key={index}\n              ref={\n                selectedConversation.messages.length - 1 === index\n                  ? setRef\n                  : null\n              }\n              className={`'my-1 d-flex flex-column ${\n                message.fromMe\n                  ? 'align-self-end align-items-end'\n                  : 'align-items-start'\n              }`}\n            >\n              <div\n                className={`rounded px-2 py-1 ${\n                  message.fromMe ? 'bg-primary text-white' : 'border'\n                }`}\n              >\n                {message.text}\n              </div>\n              <div\n                className={`text-muted small ${\n                  message.fromMe ? 'text-right' : ''\n                }`}\n              >\n                {message.fromMe ? 'You' : message.senderName}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group className='m-2'>\n          <InputGroup>\n            <Form.Control\n              as='textarea'\n              required\n              value={text}\n              onChange={e => setText(e.target.value)}\n              style={{ height: '75px', resize: 'none' }}\n              onKeyPress={onKeyPress}\n            />\n            <InputGroup.Append>\n              <Button type='submit'>Send</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Group>\n      </Form>\n    </div>\n  )\n}\n\nfunction checkIsInMyContact(recipient, contacts) {\n  for (let i = 0; i < contacts.length; i++) {\n    if (contacts[i].id === recipient.id) {\n      return true\n    }\n  }\n  return false\n}\n","import React from 'react'\nimport { ListGroup } from 'react-bootstrap'\nimport { useConversations } from '../contexts/ConversationsProvider'\n\nexport default function Conversations() {\n  const { conversations, selectConversationIndex } = useConversations()\n  \n  return (\n    <ListGroup variant='flush'>\n      {conversations.map((conversation, index) => {\n        return (\n          <ListGroup.Item\n            key={index}\n            action\n            active={conversation.selected}\n            onClick={() => selectConversationIndex(index)}\n          >\n            {conversation.recipients.map(r => r.name).join(', ')}\n          </ListGroup.Item>\n        )\n      })}\n    </ListGroup>\n  )\n}\n","import React from 'react'\nimport { useContacts } from '../contexts/ContactsProvider'\nimport { ListGroup } from 'react-bootstrap'\n\nexport default function Contacts() {\n  const { contacts } = useContacts()\n\n  return (\n    <ListGroup variant='flush'>\n      {contacts.map(contact => (\n        <ListGroup.Item key={contact.id}>{contact.name}</ListGroup.Item>\n      ))}\n    </ListGroup>\n  )\n}\n","import React, { useState } from 'react'\nimport { Tab, Nav, Button, OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport Conversations from './Conversations'\nimport Contacts from './Contacts'\nimport { useModal } from '../contexts/ModalProvider'\nimport useCopyToClipboard from '../hooks/useCopyToClipboard'\nconst { Container: TabContainer, Content: TabContent, Pane: TabPane } = Tab\nconst { Item: NavItem, Link: NavLink } = Nav\n\nconst CONVERSATIONS_KEY = 'conversations'\nconst CONTACTS_KEY = 'contacts'\n\nexport default function Sidebar({ id }) {\n  const [activeKey, setActiveKey] = useState(CONVERSATIONS_KEY)\n  const modal = useModal()\n  const conversationOpen = activeKey === CONVERSATIONS_KEY\n  const [isCopied, handleCopy] = useCopyToClipboard(5000)\n\n  const openModal = () => {\n    if (conversationOpen) {\n      modal.openModal('conversation')\n    } else {\n      modal.openModal('contact')\n    }\n  }\n\n  return (\n    <div style={{ width: '250px' }} className='d-flex flex-column'>\n      <TabContainer activeKey={activeKey} onSelect={setActiveKey}>\n        <Nav variant='tabs' className='justify-content-center'>\n          <NavItem>\n            <NavLink eventKey={CONVERSATIONS_KEY}>Conversations</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink eventKey={CONTACTS_KEY}>Contacts</NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent className='border-right overflow-auto flex-grow-1'>\n          <TabPane eventKey={CONVERSATIONS_KEY}>\n            <Conversations />\n          </TabPane>\n          <TabPane eventKey={CONTACTS_KEY}>\n            <Contacts />\n          </TabPane>\n        </TabContent>\n        <OverlayTrigger\n          placement={'top'}\n          overlay={<Tooltip>{isCopied ? 'Copied!' : 'Click to copy'}</Tooltip>}\n        >\n          <div\n            className='p-2 border-top border-right small'\n            style={{ cursor: 'pointer' }}\n            onClick={() => handleCopy(id)}\n          >\n            Your Id: <span className='text-muted'>{id}</span>\n          </div>\n        </OverlayTrigger>\n        <Button variant='danger' onClick={() => localStorage.clear()}>\n          DELETE ALL DATA\n        </Button>\n        <Button onClick={openModal} className='rounded-0'>\n          New {conversationOpen ? 'Conversation' : 'Contact'}\n        </Button>\n        {modal.render}\n      </TabContainer>\n    </div>\n  )\n}\n","import React from 'react'\nimport copy from 'copy-to-clipboard'\n\nexport default function useCopyToClipboard(resetInterval = null) {\n  const [isCopied, setCopied] = React.useState(false)\n\n  const handleCopy = React.useCallback(text => {\n    if (typeof text === 'string' || typeof text == 'number') {\n      copy(text.toString())\n      setCopied(true)\n    } else {\n      setCopied(false)\n      console.error(\n        `Cannot copy typeof ${typeof text} to clipboard, must be a string or number.`\n      )\n    }\n  }, [])\n\n  React.useEffect(() => {\n    let timeout\n    if (isCopied && resetInterval) {\n      timeout = setTimeout(() => setCopied(false), resetInterval)\n    }\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [isCopied, resetInterval])\n\n  return [isCopied, handleCopy]\n}\n","import React from 'react'\nimport { useConversations } from '../contexts/ConversationsProvider'\nimport OpenConversation from './OpenConversation'\nimport Sidebar from './Sidebar'\n\nexport default function Dashboard({ id }) {\n  const { selectedConversation } = useConversations()\n  return (\n    <>\n      <div className='d-flex' style={{ height: '100vh' }}>\n        <Sidebar id={id} />\n        {selectedConversation && <OpenConversation />}\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport useLocalStorage from '../hooks/useLocalStorage'\nimport Login from './Login'\nimport Dashboard from './Dashboard'\nimport ContactsProvider from '../contexts/ContactsProvider'\nimport ConversationsProvider from '../contexts/ConversationsProvider'\nimport SocketProvider from '../contexts/SocketProvider'\nimport ModalProvider from '../contexts/ModalProvider'\n\nfunction App() {\n  const [id, setId] = useLocalStorage('id')\n  const dashboard = (\n    <SocketProvider id={id}>\n      <ModalProvider>\n        <ContactsProvider>\n          <ConversationsProvider id={id}>\n            <Dashboard id={id} />\n          </ConversationsProvider>\n        </ContactsProvider>\n      </ModalProvider>\n    </SocketProvider>\n  )\n  return id ? dashboard : <Login onIdSubmit={setId} />\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}